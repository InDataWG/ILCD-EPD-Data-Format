name: Convert CSV to HTML

on:
  push:
    branches:
      - main
      - gitActions
    paths:
      - 'doc/*.csv' # only execute when there is a change in a csv file

permissions:
  contents: write  # Set permissions for the entire workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas

    - name: List CSV files
      run: |
        echo "Listing CSV files in the /doc/ directory"
        ls -l doc/*.csv || echo "No CSV files found in /doc/"

    - name: Convert CSV to HTML
      run: |
        python - <<EOF
        import pandas as pd
        import glob
        import os

        # Create the output directory if it doesn't exist
        output_dir = "doc/html_output"
        os.makedirs(output_dir, exist_ok=True)

        # Define the files and their IDs
        files_with_ids = {
            "BackgroundDB_SourceDatasets_ecoinvent": "doc/BackgroundDB_SourceDatasets_ecoinvent.csv",
            "BackgroundDB_SourceDatasets_GaBi": "doc/BackgroundDB_SourceDatasets_GaBi.csv",
            "Common_references": "doc/Common_references.csv",
            "Country_specific_indicators": "doc/Country_specific_indicators.csv",
            "EN15804+A1_indicators": "doc/EN15804+A1_indicators.csv",
            "EN15804+A2_indicators": "doc/EN15804+A2_indicators.csv",
            "Flow_properties_and_unit_groups": "doc/Flow_properties_and_unit_groups.csv"
        }

        for file_id, file_path in files_with_ids.items():
            if os.path.exists(file_path):
                df = pd.read_csv(file_path)
                html_table = df.to_html(index=False, classes='table table-striped', border=0, table_id=file_id)
                html_filename = os.path.join(output_dir, os.path.basename(file_path).replace('.csv', '.html'))
                with open(html_filename, 'w') as f:
                    f.write(f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
                        <title>{os.path.basename(file_path)}</title>
                    </head>
                    <body>
                        <div class="container">
                            <h1>{os.path.basename(file_path)}</h1>
                            {html_table}
                        </div>
                    </body>
                    </html>
                    """)
        # Add a separate HTML file with the button and JavaScript
        button_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
            <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
            <title>Download as Excel</title>
        </head>
        <body>
            <div class="container">
                <h1>Download all tables as Excel</h1>
                <button id='download-button' class='btn btn-primary'>Download as Excel</button>
            </div>
            <script>
                document.getElementById('download-button').addEventListener('click', function () {
                    var wb = XLSX.utils.book_new();

                    // Add sheets for background data
                    var ecoinventTable = document.querySelector('#BackgroundDB_SourceDatasets_ecoinvent');
                    var gabiTable = document.querySelector('#BackgroundDB_SourceDatasets_GaBi');
                    if (ecoinventTable) {
                        var ecoinventWS = XLSX.utils.table_to_sheet(ecoinventTable);
                        XLSX.utils.book_append_sheet(wb, ecoinventWS, 'BackgroundDB_SourceDatasets_ecoinvent');
                    }
                    if (gabiTable) {
                        var gabiWS = XLSX.utils.table_to_sheet(gabiTable);
                        XLSX.utils.book_append_sheet(wb, gabiWS, 'BackgroundDB_SourceDatasets_GaBi');
                    }

                    // Add sheets for indicators
                    var commonRefsTable = document.querySelector('#Common_references');
                    var countrySpecificTable = document.querySelector('#Country_specific_indicators');
                    var en15804A1Table = document.querySelector('#EN15804+A1_indicators');
                    var en15804A2Table = document.querySelector('#EN15804+A2_indicators');
                    var flowPropsTable = document.querySelector('#Flow_properties_and_unit_groups');
                    if (commonRefsTable) {
                        var commonRefsWS = XLSX.utils.table_to_sheet(commonRefsTable);
                        XLSX.utils.book_append_sheet(wb, commonRefsWS, 'Common_references');
                    }
                    if (countrySpecificTable) {
                        var countrySpecificWS = XLSX.utils.table_to_sheet(countrySpecificTable);
                        XLSX.utils.book_append_sheet(wb, countrySpecificWS, 'Country_specific_indicators');
                    }
                    if (en15804A1Table) {
                        var en15804A1WS = XLSX.utils.table_to_sheet(en15804A1Table);
                        XLSX.utils.book_append_sheet(wb, en15804A1WS, 'EN15804+A1_indicators');
                    }
                    if (en15804A2Table) {
                        var en15804A2WS = XLSX.utils.table_to_sheet(en15804A2Table);
                        XLSX.utils.book_append_sheet(wb, en15804A2WS, 'EN15804+A2_indicators');
                    }
                    if (flowPropsTable) {
                        var flowPropsWS = XLSX.utils.table_to_sheet(flowPropsTable);
                        XLSX.utils.book_append_sheet(wb, flowPropsWS, 'Flow_properties_and_unit_groups');
                    }

                    XLSX.writeFile(wb, 'Converted_CSVs.xlsx');
                });
            </script>
        </body>
        </html>
        """
        with open(os.path.join(output_dir, 'download.html'), 'w') as f:
            f.write(button_html)
        EOF

    - name: Check HTML output
      run: |
        echo "Listing files in doc/html_output directory"
        ls -l doc/html_output || echo "doc/html_output directory not found or is empty"

    - name: Commit and push HTML files
      if: success()
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add doc/html_output/*.html || exit 0
        git commit -m 'Automated conversion of CSV to HTML'
        git push origin HEAD:gitActions
