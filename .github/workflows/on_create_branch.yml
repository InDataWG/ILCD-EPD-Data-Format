name: Create Branch Documentation

on:
  create:
    branches:
      - '**'  

permissions:
  contents: write

jobs:
  convert_csv_and_update_readme:
    if: startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the new branch that was just created
      - name: Checkout new branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.ref }}

      # Step 2: Get the branch name
      - name: Get Branch Name
        id: vars
        run: |
          branch_name="${GITHUB_REF#refs/heads/}"
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      # Step 3: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl

      # Step 5: Convert CSV to HTML 
      - name: Convert CSV to HTML
        run: |
          html_output_dir="gitBranches/${{ env.branch_name }}/identifiers"
          
          mkdir -p "$html_output_dir"

          python - <<EOF
          import pandas as pd
          import os
          from openpyxl import load_workbook

          # Output directory based on branch name
          html_output_dir = "${html_output_dir}"
  

          # Define files and IDs
          files_with_ids = {
              "ecoinvent database: source data sets": "doc/identifiers/BackgroundDB_SourceDatasets_ecoinvent.csv",
              "GaBi database: source data sets": "doc/identifiers/BackgroundDB_SourceDatasets_GaBi.csv",
              "Common references": "doc/identifiers/Common_references.csv",
              "Country-specific indicators": "doc/identifiers/Country-specific_indicators.csv",
              "EN15804+A1 indicators": "doc/identifiers/EN15804+A1_indicators.csv",
              "EN15804+A2 (EF3.0) indicators": "doc/identifiers/EN15804+A2_EF3.0_indicators.csv",
              "EN15804+A2 (EF3.1) indicators": "doc/identifiers/EN15804+A2_EF3.1_indicators.csv",
              "Flow properties and unit groups": "doc/identifiers/Flow_properties_and_unit_groups.csv"
          }

          # Convert CSV to HTML
          for file_id, file_path in files_with_ids.items():
              if os.path.exists(file_path):
                  df = pd.read_csv(file_path)
                  html_table = df.to_html(index=False, classes='table table-striped', border=0, table_id=file_id)
                  html_filename = os.path.join(html_output_dir, os.path.basename(file_path).replace('.csv', '.html'))
                  with open(html_filename, 'w') as f:
                      f.write(f"""
                      <!DOCTYPE html>
                      <html>
                      <head>
                          <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
                          <title>{file_id}</title>
                      </head>
                      <body>
                          <div class="container">
                              <h1>{file_id}</h1>
                              {html_table}
                          </div>
                      </body>
                      </html>
                      """)


      # Step 6: Checkout the gitActions branch and create directories for schemadoc
      - name: Checkout gitActions branch
        uses: actions/checkout@v2
        with:
          ref: gitActions
          path: gitActions

      - name: Create directories for new branch outputs
        run: |
          mkdir -p gitActions/gitBranches/${{ env.branch_name }}/schemadoc

      - name: Copy Files to gitActions
        run: |
          branch_name="${{ env.branch_name }}"
          cp -r gitBranches/$branch_name gitActions/gitBranches/
          cp -r ./doc/schemadoc/* gitActions/gitBranches/$branch_name/schemadoc/

      # Step 7: Commit and push changes to gitActions branch
      - name: Commit and push changes to gitActions branch
        working-directory: gitActions
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add gitBranches/${{ env.branch_name }}
          git commit -m "Converted CSV files and added schemadoc content for ${{ env.branch_name }}"
          git push origin gitActions

      # Step 8: Clear the content of README.md before updating it
      - name: Clear README.md
        run: |
          echo "" > README.md

      # Step 9: Update the README.md with links to the HTML files
      - name: Update README.md with title and links
        run: |
          branch_name=${{ env.branch_name }}
          readme_path="README.md"
        
          links="
          # ILCD-EPD-Data-Format
          ## Schemadocs:\n\n
          - [EPD DataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/EPD_DataSet.html)\n
          - [EPD FlowDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/EPD_FlowDataSet.html)\n
          - [ILCD Common DataTypes](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_Common_DataTypes.html)\n
          - [ILCD Common EnumerationValues](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_Common_EnumerationValues.html)\n
          - [ILCD ContactDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_ContactDataSet.html)\n
          - [ILCD FlowPropertyDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_FlowPropertyDataSet.html)\n
          - [ILCD LCIAMethodDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_LCIAMethodDataSet.html)\n
          - [ILCD SourceDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_SourceDataSet.html)\n
          - [ILCD UnitGroupDataSet](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/schemadoc/ILCD_UnitGroupDataSet.html)\n\n

          ## Identifier:\n\n
          - [BackgroundDB SourceDatasets ecoinvent](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/BackgroundDB_SourceDatasets_ecoinvent.html)\n
          - [BackgroundDB SourceDatasets GaBi](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/BackgroundDB_SourceDatasets_GaBi.html)\n
          - [EN15804+A1 indicators](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/EN15804+A1_indicators.html)\n
          - [EN15804+A2 (EF3.0) indicators](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/EN15804+A2_EF3.0_indicators.html)\n
          - [EN15804+A2 (EF3.1) indicators](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/EN15804+A2_EF3.1_indicators.html)\n
          - [Common references](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/Common_references.html)\n
          - [Country specific indicators](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/Country-specific_indicators.html)\n
          - [Flow properties and unit groups](https://indatawg.github.io/ILCD-EPD-Data-Format/gitBranches/$branch_name/identifiers/Flow_properties_and_unit_groups.html)\n\n
          "

          # Add links to README.md
          echo -e "$links" >> $readme_path

      # Step 10: Commit and push the updated README.md to the new branch
      - name: Commit and push updated README.md
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Added links to HTML documentation for ${{ env.branch_name }}"
          git push origin ${{ env.branch_name }}
